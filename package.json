{
  "name": "abracadabra",
  "version": "9.4.8",
  "displayName": "Abracadabra, refactor this!",
  "publisher": "nicoespeon",
  "description": "Automated refactorings for VS Code, in JavaScript and TypeScript.",
  "author": "Nicolas Carlo <nicolascarlo.espeon@gmail.com>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/nicoespeon/abracadabra.git"
  },
  "homepage": "https://github.com/nicoespeon/abracadabra",
  "bugs": "https://github.com/nicoespeon/abracadabra/issues",
  "sponsor": {
    "url": "https://github.com/sponsors/nicoespeon"
  },
  "keywords": [
    "refactor",
    "legacy code",
    "javascript",
    "typescript",
    "react",
    "vue",
    "svelte"
  ],
  "categories": [
    "Formatters",
    "Programming Languages",
    "Other"
  ],
  "icon": "docs/logo/abracadabra-vignette.png",
  "galleryBanner": {
    "color": "#34223A",
    "theme": "dark"
  },
  "engines": {
    "vscode": ">=1.93.0",
    "node": ">=22.0.0"
  },
  "main": "./out/extension.js",
  "browser": "./out/extension-browser.js",
  "scripts": {
    "contrib": "all-contributors",
    "prepare": "husky",
    "hygen": "hygen",
    "new": "hygen refactoring new",
    "test": "jest",
    "pretest:contract": "tsup-node 'src/**/*.ts' --loader '.html=text' --out-dir out",
    "test:contract": "yarn pretest:contract && node ./out/test/run-contract-tests.js",
    "test:ci": "yarn typecheck && yarn test && yarn test:contract",
    "typecheck": "tsc -p tsconfig.json --noEmit",
    "lint": "eslint src --ignore-pattern '**/playground/**'",
    "build": "node esbuild.config.js --node --browser",
    "build:node": "node esbuild.config.js --node",
    "build:browser": "node esbuild.config.js --browser",
    "prepackage": "rm -rf dist/*.vsix && rm -rf out/",
    "vscode:prepublish": "yarn build --production",
    "package": "vsce package --no-dependencies && yarn postpackage",
    "postpackage": "mkdir -p dist && mv *.vsix dist",
    "package:install": "code --install-extension dist/*.vsix",
    "deploy": "yarn deploy:vscode && yarn deploy:ovsx",
    "deploy:vscode": "vsce publish --no-dependencies",
    "deploy:ovsx": "ovsx publish --no-dependencies"
  },
  "devDependencies": {
    "@babel/core": "7.26.0",
    "@babel/preset-env": "7.25.3",
    "@babel/preset-typescript": "7.26.0",
    "@eslint/eslintrc": "3.2.0",
    "@eslint/js": "9.19.0",
    "@types/babel__traverse": "7.20.6",
    "@types/chai": "4.3.5",
    "@types/glob": "8.1.0",
    "@types/jest": "29.5.14",
    "@types/jsdom": "21.1.7",
    "@types/mocha": "10.0.7",
    "@types/node": "22.10.3",
    "@types/pluralize": "0.0.33",
    "@types/sinon": "17.0.2",
    "@types/vscode": "1.93.0",
    "@vscode/test-electron": "2.4.1",
    "all-contributors-cli": "6.26.1",
    "babel-jest": "29.7.0",
    "chai": "4.3.10",
    "esbuild": "0.25.0",
    "eslint": "9.17.0",
    "glob": "11.0.1",
    "globals": "15.14.0",
    "husky": "9.1.7",
    "hygen": "6.2.11",
    "jest": "29.7.0",
    "jest-environment-jsdom": "29.7.0",
    "jest-html-loader": "1.0.0",
    "jsdom": "25.0.1",
    "lint-staged": "15.4.3",
    "mocha": "10.7.0",
    "node-stdlib-browser": "1.3.0",
    "ovsx": "0.9.5",
    "prettier": "3.5.2",
    "prettier-plugin-organize-imports": "4.1.0",
    "pretty-quick": "4.0.0",
    "sinon": "19.0.2",
    "tsup": "8.1.0",
    "typescript": "5.8.2",
    "typescript-eslint": "8.13.0",
    "vsce": "2.15.0"
  },
  "dependencies": {
    "@babel/parser": "7.26.2",
    "@babel/traverse": "7.25.6",
    "@babel/types": "7.20.7",
    "minimatch": "10.0.1",
    "pluralize": "8.0.0",
    "recast": "0.23.9",
    "ts-pattern": "5.5.0"
  },
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onLanguage:vue",
    "onLanguage:svelte"
  ],
  "contributes": {
    "commands": [
      {
        "command": "abracadabra.addNumericSeparator",
        "title": "Add Numeric Separator",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.changeSignature",
        "title": "Change Signature",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertForToForEach",
        "title": "Convert For-Loop to ForEach",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertForEachToForOf",
        "title": "Convert ForEach to For-Of",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
        "title": "Convert to Arrow Function",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertIfElseToTernary",
        "title": "Convert If/Else to Ternary",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertIfElseToSwitch",
        "title": "Convert If/Else to Switch",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertSwitchToIfElse",
        "title": "Convert Switch to If/Else",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertTernaryToIfElse",
        "title": "Convert Ternary to If/Else",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertToTemplateLiteral",
        "title": "Convert to Template Literal",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.convertLetToConst",
        "title": "Convert let to const",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.createFactoryForConstructor",
        "title": "Create Factory for Constructor",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.extract",
        "title": "Extract",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.extractGenericType",
        "title": "Extract Generic Type",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.extractInterface",
        "title": "Extract Interface",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.flipIfElse",
        "title": "Flip If/Else",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.flipTernary",
        "title": "Flip Ternary",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.flipOperator",
        "title": "Flip Operator",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.inline",
        "title": "Inline",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.liftUpConditional",
        "title": "Lift Up Conditional",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.mergeIfStatements",
        "title": "Merge If Statements",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.mergeWithPreviousIfStatement",
        "title": "Merge With Previous If Statement",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.moveStatementDown",
        "title": "Move Statement Down",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.moveStatementUp",
        "title": "Move Statement Up",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.invertBooleanLogic",
        "title": "Invert Boolean Logic",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.removeDeadCode",
        "title": "Remove Dead Code",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.removeJsxFragment",
        "title": "Remove JSX Fragment",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.removeRedundantElse",
        "title": "Remove Redundant Else",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.renameSymbol",
        "title": "Rename Symbol",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.replaceBinaryWithAssignment",
        "title": "Replace Binary with Expression",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.simplifyBoolean",
        "title": "Simplify Boolean",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.simplifyTernary",
        "title": "Simplify Ternary",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.splitDeclarationAndInitialization",
        "title": "Split Declaration and Initialization",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.splitIfStatement",
        "title": "Split If Statement",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.splitMultipleDeclarations",
        "title": "Split Multiple Declarations",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.toggleBraces",
        "title": "Toggle Braces",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.toggleHighlight",
        "title": "Toggle Highlight",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.refreshHighlights",
        "title": "Refresh Highlights",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.removeAllHighlights",
        "title": "Remove All Highlights",
        "category": "Abracadabra"
      },
      {
        "command": "abracadabra.wrapInJsxFragment",
        "title": "Wrap in JSX Fragment",
        "category": "Abracadabra"
      }
    ],
    "keybindings": [
      {
        "command": "abracadabra.quickFix",
        "key": "alt+enter",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.renameSymbol",
        "key": "f2",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.toggleHighlight",
        "key": "ctrl+alt+h",
        "mac": "ctrl+h",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.refreshHighlights",
        "key": "shift+alt+h",
        "mac": "ctrl+alt+h",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.removeAllHighlights",
        "key": "shift+ctrl+alt+h",
        "mac": "shift+ctrl+h",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.extract",
        "key": "ctrl+alt+v",
        "mac": "cmd+alt+v",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.inline",
        "key": "ctrl+alt+n",
        "mac": "cmd+alt+n",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.moveStatementDown",
        "key": "alt+shift+d",
        "when": "editorTextFocus"
      },
      {
        "command": "abracadabra.moveStatementUp",
        "key": "alt+shift+u",
        "when": "editorTextFocus"
      }
    ],
    "configuration": {
      "title": "Abracadabra",
      "properties": {
        "abracadabra.ignoredFolders": {
          "type": "array",
          "default": [
            "node_modules"
          ],
          "description": "Folders where it won't propose Quick Fixes (defaults: `node_modules`)."
        },
        "abracadabra.ignoredPatterns": {
          "type": "array",
          "default": [
            "dist/*",
            "build/*"
          ],
          "description": "Glob patterns where it won't propose Quick Fixes (defaults: `dist/*`, `build/*`)."
        },
        "abracadabra.maxFileLinesCount": {
          "type": "number",
          "default": 10000,
          "description": "Don't propose refactorings on files that have more lines of code than this threshold."
        },
        "abracadabra.maxFileSizeInKb": {
          "type": "number",
          "default": 250,
          "description": "Don't propose refactorings on files that are bigger than this threshold (kB)."
        },
        "abracadabra.autoConvertToTemplateLiteral": {
          "type": "boolean",
          "default": true,
          "description": "Automatically convert a string into a template literal when you insert `${}`."
        },
        "abracadabra.addNumericSeparator.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.changeSignature.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertForToForEach.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertForEachToForOf.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertFunctionDeclarationToArrowFunction.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertIfElseToTernary.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertIfElseToSwitch.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertSwitchToIfElse.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertTernaryToIfElse.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertToTemplateLiteral.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.convertLetToConst.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.createFactoryForConstructor.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.extractGenericType.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.extractInterface.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.flipIfElse.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.flipTernary.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.flipOperator.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.inline.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.liftUpConditional.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.mergeIfStatements.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.mergeWithPreviousIfStatement.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.invertBooleanLogic.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.removeDeadCode.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.removeJsxFragment.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.removeRedundantElse.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.replaceBinaryWithAssignment.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.simplifyBoolean.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.simplifyTernary.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.splitDeclarationAndInitialization.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.splitIfStatement.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.splitMultipleDeclarations.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.toggleBraces.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        },
        "abracadabra.wrapInJsxFragment.showInQuickFix": {
          "type": "boolean",
          "default": true,
          "description": "Check if it should appear in the Quick Fix suggestions when it can be executed"
        }
      }
    },
    "menus": {
      "commandPalette": [
        {
          "command": "abracadabra.addNumericSeparator",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.addNumericSeparator",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.addNumericSeparator",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.addNumericSeparator",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.addNumericSeparator",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.addNumericSeparator",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.changeSignature",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.changeSignature",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.changeSignature",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.changeSignature",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.changeSignature",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.changeSignature",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertForToForEach",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertForToForEach",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertForToForEach",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertForToForEach",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertForToForEach",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertForToForEach",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertForEachToForOf",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertForEachToForOf",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertForEachToForOf",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertForEachToForOf",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertForEachToForOf",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertForEachToForOf",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertIfElseToTernary",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertIfElseToTernary",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertIfElseToTernary",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertIfElseToTernary",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertIfElseToTernary",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertIfElseToTernary",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertIfElseToSwitch",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertIfElseToSwitch",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertIfElseToSwitch",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertIfElseToSwitch",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertIfElseToSwitch",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertIfElseToSwitch",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertSwitchToIfElse",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertSwitchToIfElse",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertSwitchToIfElse",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertSwitchToIfElse",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertSwitchToIfElse",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertSwitchToIfElse",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertTernaryToIfElse",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertTernaryToIfElse",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertTernaryToIfElse",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertTernaryToIfElse",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertTernaryToIfElse",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertTernaryToIfElse",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertToTemplateLiteral",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertToTemplateLiteral",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertToTemplateLiteral",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertToTemplateLiteral",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertToTemplateLiteral",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertToTemplateLiteral",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.convertLetToConst",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.convertLetToConst",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.convertLetToConst",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.convertLetToConst",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.convertLetToConst",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.convertLetToConst",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.createFactoryForConstructor",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.createFactoryForConstructor",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.createFactoryForConstructor",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.createFactoryForConstructor",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.createFactoryForConstructor",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.createFactoryForConstructor",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.extract",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.extract",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.extract",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.extract",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.extract",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.extract",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.extractGenericType",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.extractGenericType",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.extractGenericType",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.extractGenericType",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.extractInterface",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.extractInterface",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.extractInterface",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.extractInterface",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.flipIfElse",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.flipIfElse",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.flipIfElse",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.flipIfElse",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.flipIfElse",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.flipIfElse",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.flipTernary",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.flipTernary",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.flipTernary",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.flipTernary",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.flipTernary",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.flipTernary",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.flipOperator",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.flipOperator",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.flipOperator",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.flipOperator",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.flipOperator",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.flipOperator",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.inline",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.inline",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.inline",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.inline",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.inline",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.inline",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.liftUpConditional",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.liftUpConditional",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.liftUpConditional",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.liftUpConditional",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.liftUpConditional",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.liftUpConditional",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.mergeIfStatements",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.mergeIfStatements",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.mergeIfStatements",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.mergeIfStatements",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.mergeIfStatements",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.mergeIfStatements",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.mergeWithPreviousIfStatement",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.mergeWithPreviousIfStatement",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.mergeWithPreviousIfStatement",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.mergeWithPreviousIfStatement",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.mergeWithPreviousIfStatement",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.mergeWithPreviousIfStatement",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.moveStatementDown",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.moveStatementDown",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.moveStatementDown",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.moveStatementDown",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.moveStatementDown",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.moveStatementDown",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.moveStatementUp",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.moveStatementUp",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.moveStatementUp",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.moveStatementUp",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.moveStatementUp",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.moveStatementUp",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.invertBooleanLogic",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.invertBooleanLogic",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.invertBooleanLogic",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.invertBooleanLogic",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.invertBooleanLogic",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.invertBooleanLogic",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.removeDeadCode",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.removeDeadCode",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.removeDeadCode",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.removeDeadCode",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.removeDeadCode",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.removeDeadCode",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.removeJsxFragment",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.removeJsxFragment",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.removeRedundantElse",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.removeRedundantElse",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.removeRedundantElse",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.removeRedundantElse",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.removeRedundantElse",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.removeRedundantElse",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.renameSymbol",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.renameSymbol",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.renameSymbol",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.renameSymbol",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.renameSymbol",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.renameSymbol",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.replaceBinaryWithAssignment",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.replaceBinaryWithAssignment",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.replaceBinaryWithAssignment",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.replaceBinaryWithAssignment",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.replaceBinaryWithAssignment",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.replaceBinaryWithAssignment",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.simplifyBoolean",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.simplifyBoolean",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.simplifyBoolean",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.simplifyBoolean",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.simplifyBoolean",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.simplifyBoolean",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.simplifyTernary",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.simplifyTernary",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.simplifyTernary",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.simplifyTernary",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.simplifyTernary",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.simplifyTernary",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.splitDeclarationAndInitialization",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.splitDeclarationAndInitialization",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.splitDeclarationAndInitialization",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.splitDeclarationAndInitialization",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.splitDeclarationAndInitialization",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.splitDeclarationAndInitialization",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.splitIfStatement",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.splitIfStatement",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.splitIfStatement",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.splitIfStatement",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.splitIfStatement",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.splitIfStatement",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.splitMultipleDeclarations",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.splitMultipleDeclarations",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.splitMultipleDeclarations",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.splitMultipleDeclarations",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.splitMultipleDeclarations",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.splitMultipleDeclarations",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.toggleBraces",
          "when": "editorLangId == javascript"
        },
        {
          "command": "abracadabra.toggleBraces",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.toggleBraces",
          "when": "editorLangId == typescript"
        },
        {
          "command": "abracadabra.toggleBraces",
          "when": "editorLangId == typescriptreact"
        },
        {
          "command": "abracadabra.toggleBraces",
          "when": "editorLangId == vue"
        },
        {
          "command": "abracadabra.toggleBraces",
          "when": "editorLangId == svelte"
        },
        {
          "command": "abracadabra.wrapInJsxFragment",
          "when": "editorLangId == javascriptreact"
        },
        {
          "command": "abracadabra.wrapInJsxFragment",
          "when": "editorLangId == typescriptreact"
        }
      ]
    }
  },
  "packageManager": "yarn@4.4.0"
}
